class Reservation

types

instance variables
  Booking:[Booking] := nil;
  Transaction:[Transaction] := nil;
  Price:real := 0;
  StartDate:Date;
  EndDate:Date;
  
  inv Price >= 0 and StartDate.IsBefore(EndDate);
  
operations
	
	/*
	* Constructor of the Reservation class
	* Pre:
	* - An insurance must be passed as argument and  
	* the start date must be inferior to the end date 
	* Post:
	* - The object must have the passed parameters and the booking attribute should stay nil
	*/	
	public Reservation : Insurance * Date * Date ==> Reservation
	Reservation(insurance, startDate, endDate) ==
		(
			dcl numDays : nat := Date`CountDays(startDate, endDate);
			Price := (numDays * insurance.getPrice()) + insurance.getDepositValue();
			StartDate := startDate;
			EndDate := endDate;
			return self
		)
		pre insurance <> undefined and startDate.IsBefore(endDate)
		post Price >= 0 and StartDate.IsBefore(EndDate) and Booking = nil;
 
 	/*
	* Get the reservation price
	* Post:
	* - The price must be the same of the object
	*/	
	public pure getPrice : () ==> real
	getPrice() == 
		return Price
		post RESULT = Price;
		
	/*
	* Get the reservation payed
	*/	
	public pure isPayed : () ==> bool
	isPayed() == 
		(
			if Transaction <> nil 
			then 
				return true 
			else
				return false
		);
		
	/*
	* Get the reservations days duration
	* Pre:
	* - Both dates must be defined
	* Post:
	* -  The duration must be of minimum of 1 day
	*/	
	public pure getDuration : () ==> int
	getDuration() == 
		(
			return Date`CountDays(StartDate, EndDate)
		)
		pre StartDate <> undefined and EndDate <> undefined
		post RESULT > 0;
		
	/*
	* Set the reservation payed
	* Pre:
	* - The transaction date must be before the reservation startdate
	* Post:
	* - The object value must be the same of parameter
	*/	
	public setPayed : [Transaction] ==> ()
	setPayed(transaction) ==
		(
			Turo`addTransaction(transaction);
			Transaction := transaction;
		)
		pre transaction.getDate().IsBefore(StartDate) and Transaction = nil
		post Transaction = transaction;
		
	/*
	* Add the Booking attribute variable
	* Pre:
	* - The object must have no prior Booking object ref 
	* Post:
	* - The object must have the passed parameter
	*/	
	public addBooking : [Booking] ==> ()
		addBooking(booking) ==
			(
				Booking := booking;
			)
			pre Booking = nil
			post Booking = booking;
			
	public pure getBooking : () ==> [Booking]
		getBooking() ==
			return Booking
			post RESULT = Booking;
functions

end Reservation
