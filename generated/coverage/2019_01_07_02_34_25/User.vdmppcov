class User
	
instance variables
  creates:[Reservation] := nil;
  protected Name:seq of (char) := [];
  protected Email:seq of (char) := [];
  protected PhoneNumber:int := 0;
  protected Location:seq of (char) := [];
  protected BirthDate:Date;
  protected License: seq of (char) := [];
  
 operations
 
 	/*
	* Constructor of the User class
	* Pre:
	* - The parameters must be valid inputs
	* and the user needs to be at least 21 years old 
	* Post:
	* - The object must have the passed parameters and have no Reservation at start
	*/	
 	public User : seq of (char) * seq of (char) * int * seq of (char) * seq of (char) * Date ==> User
 	User(name, email, phone, location, license, birth) ==
	 	(
			Name := name;
			Email := email;
			PhoneNumber := phone;
			Location := location;
			License := license;
			BirthDate := birth;
			return self;
		)
		pre len name > 0 and len email > 0 and phone < 1000000000 and len license > 8 and len license < 12 and len location > 0 and Date`ValidAge(birth, Turo`CurrentDate)
		post creates = nil and Name = name and Email = email and PhoneNumber = phone and Location = location and License = license and BirthDate = birth;
	
	/*
	* Get the User email
	* Post:
	* - The email must be the same of the object
	*/	
	public pure getEmail : () ==> seq of (char)
		getEmail() ==
			return Email
			post RESULT = Email;
	
	/*
	* Get the User reservation
	* Post:
	* - The reservation must be the same of the object
	*/	
	public pure getReservation : () ==> [Reservation]
		getReservation() ==
			return creates
			post RESULT = creates;
			
	/*
	* Add the User reservation
	* Pre:
	* - The user must have no prior reservation
	* Post:
	* - The reservation must be the same of the object
	*/
	public addReservation : [Reservation] ==> ()
		addReservation(reservation) ==
			(
				creates := reservation;
			)
			pre creates = nil
			post creates = reservation;
			
	/*
	* Remove the User reservation
	* Pre:
	* - The user must have a previously set reservation
	* Post:
	* - The reservation must be nil
	*/		
	public removeReservation : () ==> ()
		removeReservation() ==
			(
				creates := nil;
			)
			pre creates <> nil
			post creates = nil;
	
	/*
	* Remove the User reservation
	* Pre:
	* - The user must have a previously set reservation
	* Post:
	* - The reservation must be nil
	*/	
	public cancelReservation : () ==> ()
		cancelReservation() ==
			(
				dcl vehicle : Vehicle := Turo`getVehicle(creates);
				dcl transaction : Transaction := new Transaction(Turo`getCancelFee(), Turo`CurrentDate);
				Turo`addTransaction(transaction);
				vehicle.removeReservation();
				creates := nil;
			)
			pre creates <> nil
			post creates = nil;
			
	/*
	* Deliver the Vehicle
	* Pre:
	* - The user must have a previously set reservation and parameters must be positive
	* Post:
	* - The reservation attribute should be now have a booking
	*/		
	public deliverVehicle : real * real * nat1 ==> ()
		deliverVehicle(fuelPrice, fuelUsed, carRating) ==
			(
				dcl numDays : int := creates.getDuration();
				dcl resVehicle : Vehicle := Turo`getVehicle(creates);
				dcl booking : Booking := new Booking(numDays * resVehicle.getPrice(), fuelPrice, fuelUsed);
				resVehicle.addRating(carRating);
				creates.addBooking(booking);
			)
			pre fuelPrice > 0 and fuelUsed >= 0 and creates <> nil and creates.getBooking() = nil and carRating >= 1 and carRating <= 5
			post creates.getBooking() <> nil;	
			
end User
